<?xml version="1.0" encoding="utf-8"?>
<project version="2.0.0a12" title="">
  <file path="LinkedLists/DoublyLinkedNode.php" hash="e82a28e1c21570192f04319f0c1a47e7" package="Default">
    <docblock line="2">
      <description>This file is part of the Data package.</description>
      <long-description>&lt;p&gt;For full copyright and license information, please view the LICENSE
file that was distributed with this source code.&lt;/p&gt;</long-description>
    </docblock>
    <class final="false" abstract="false" namespace="Data\LinkedLists" line="18" package="Data\LinkedLists">
      <extends/>
      <implements>\Data\IDoublyLinkedNode</implements>
      <name>DoublyLinkedNode</name>
      <full_name>\Data\LinkedLists\DoublyLinkedNode</full_name>
      <docblock line="10">
        <description>DoublyLinkedNode Class</description>
        <long-description></long-description>
        <tag line="10" name="package" description="Data\LinkedLists"/>
        <tag line="10" name="author" description="Jeremy Mills &lt;j_mills44@fanshaweonline.ca&gt;"/>
        <tag line="10" name="copyright" description="(c) Jeremy Mills"/>
        <tag line="10" name="version" description="1.0.0"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="26" namespace="Data\LinkedLists" package="Default">
        <name>$_data</name>
        <default></default>
        <docblock line="20">
          <description>Private Mem Var to hold the current value of the IDoublyLinkedNode instance</description>
          <long-description></long-description>
          <tag line="20" name="access" description="private"/>
          <tag line="20" name="var" description="value to hold value location" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="33" namespace="Data\LinkedLists" package="Default">
        <name>$_key</name>
        <default></default>
        <docblock line="27">
          <description>Private Mem Var to hold the current key IDoublyLinkedNode value</description>
          <long-description></long-description>
          <tag line="27" name="access" description="private"/>
          <tag line="27" name="var" description="key to hold key location" type="double">
            <type by_reference="false">double</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="40" namespace="Data\LinkedLists" package="Default">
        <name>$_next</name>
        <default></default>
        <docblock line="34">
          <description>Private Mem Var to hold the next IDoublyLinkedNode instance</description>
          <long-description></long-description>
          <tag line="34" name="access" description="private"/>
          <tag line="34" name="var" description="position variable pointing to the next node in sequence" type="\Data\LinkedLists\IDoublyLinkedNode">
            <type by_reference="false">\Data\LinkedLists\IDoublyLinkedNode</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="47" namespace="Data\LinkedLists" package="Default">
        <name>$_previous</name>
        <default></default>
        <docblock line="41">
          <description>Private Mem Var to hold the previous IDoublyLinkedNode instance</description>
          <long-description></long-description>
          <tag line="41" name="access" description="private"/>
          <tag line="41" name="var" description="position variable pointing to the previous node in sequence" type="\Data\LinkedLists\IDoublyLinkedNode">
            <type by_reference="false">\Data\LinkedLists\IDoublyLinkedNode</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="57" package="Data\LinkedLists">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="50">
          <description>Constructor for Node class</description>
          <long-description></long-description>
          <tag line="50" name="access" description="public"/>
          <tag line="50" name="param" description="The node to be created" type="\Data\LinkedLists\IDoublyLinkedNode" variable="$data">
            <type by_reference="false">\Data\LinkedLists\IDoublyLinkedNode</type>
          </tag>
        </docblock>
        <argument line="57">
          <name>$data</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="71" package="Data\LinkedLists">
        <name>getPrevious</name>
        <full_name>getPrevious</full_name>
        <docblock line="64">
          <description>Returns the previously linked node.</description>
          <long-description></long-description>
          <tag line="64" name="access" description="public"/>
          <tag line="64" name="return" description="Returns the previously linked node. Will return null&#10;  if no previous node exists." type="\Data\LinkedLists\IDoublyLinkedNode|null">
            <type by_reference="false">\Data\LinkedLists\IDoublyLinkedNode</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="82" package="Data\LinkedLists">
        <name>setPrevious</name>
        <full_name>setPrevious</full_name>
        <docblock line="76">
          <description>Sets the previous node.</description>
          <long-description></long-description>
          <tag line="76" name="access" description="public"/>
          <tag line="76" name="param" description="The previously linked node." type="\Data\IDoublyLinkedNode" variable="$previous">
            <type by_reference="false">\Data\IDoublyLinkedNode</type>
          </tag>
        </docblock>
        <argument line="82">
          <name>$previous</name>
          <default>null</default>
          <type>\Data\IDoublyLinkedNode</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="96" package="Data\LinkedLists">
        <name>getNext</name>
        <full_name>getNext</full_name>
        <docblock line="90">
          <description>Returns the next ILinkedNode.</description>
          <long-description></long-description>
          <tag line="90" name="access" description="public"/>
          <tag line="90" name="return" description="Returns the next ILinkedNode instance if it exists, otherwise returns NULL." type="\Data\LinkedLists\IDoublyLinkedNode|null">
            <type by_reference="false">\Data\LinkedLists\IDoublyLinkedNode</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="110" package="Data\LinkedLists">
        <name>setNext</name>
        <full_name>setNext</full_name>
        <docblock line="101">
          <description>Sets the next IDoublyLinkedNode instance.</description>
          <long-description>&lt;p&gt;The &lt;code&gt;next&lt;/code&gt; IDoublyLinkedNode should be the IDoublyLinkedNode instance that comes after
this instance within a List.&lt;/p&gt;</long-description>
          <tag line="101" name="access" description="public"/>
          <tag line="101" name="param" description="The IDoublyLinkedNode instance that is next." type="\Data\ILinkedNode" variable="$next">
            <type by_reference="false">\Data\ILinkedNode</type>
          </tag>
        </docblock>
        <argument line="110">
          <name>$next</name>
          <default>null</default>
          <type>\Data\ILinkedNode</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="124" package="Data\LinkedLists">
        <name>getKey</name>
        <full_name>getKey</full_name>
        <docblock line="118">
          <description>Returns the key value for this node.</description>
          <long-description></long-description>
          <tag line="118" name="access" description="public"/>
          <tag line="118" name="return" description="Returns the key value." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="135" package="Data\LinkedLists">
        <name>setKey</name>
        <full_name>setKey</full_name>
        <docblock line="129">
          <description>Sets the key value for this node.</description>
          <long-description></long-description>
          <tag line="129" name="access" description="public"/>
          <tag line="129" name="param" description="The key value." type="mixed" variable="$key">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="135">
          <name>$key</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="146" package="Data\LinkedLists">
        <name>getValue</name>
        <full_name>getValue</full_name>
        <docblock line="140">
          <description>Returns the value of this node (the real value assigned).</description>
          <long-description></long-description>
          <tag line="140" name="access" description="public"/>
          <tag line="140" name="return" description="The value." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="157" package="Data\LinkedLists">
        <name>setValue</name>
        <full_name>setValue</full_name>
        <docblock line="151">
          <description>Sets the value for this node.</description>
          <long-description></long-description>
          <tag line="151" name="access" description="public"/>
          <tag line="151" name="param" description="value to assign to node." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="157">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="LinkedLists/ILinkedList.php" hash="bbbf093ddfd90a7310fbcbf3bc428d3e" package="Default">
    <docblock line="2">
      <description>This file is part of the Data package.</description>
      <long-description>&lt;p&gt;For full copyright and license information, please view the LICENSE
file that was distributed with this source code.&lt;/p&gt;</long-description>
    </docblock>
    <interface namespace="Data\LinkedLists" line="20" package="Data\LinkedLists">
      <name>ILinkedList</name>
      <full_name>\Data\LinkedLists\ILinkedList</full_name>
      <extends>\Countable</extends>
      <extends>\IteratorAggregate</extends>
      <docblock line="12">
        <description>ILinkedList is the interface implemented by the LinkedList class or
any class that wishes to operate as a Linked List.</description>
        <long-description></long-description>
        <tag line="12" name="author" description="Aaron McGowan &lt;a_mcgowan43905@fanshawec.ca&gt;"/>
        <tag line="12" name="package" description="Data\LinkedLists"/>
        <tag line="12" name="version" description="1.0.0"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="28" package="Data\LinkedLists">
        <name>getFirst</name>
        <full_name>getFirst</full_name>
        <docblock line="22">
          <description>Returns the first element in the list.</description>
          <long-description></long-description>
          <tag line="22" name="access" description="public"/>
          <tag line="22" name="return" description="Returns the first ILinkedNode in the list, otherwise returns NULL." type="\Data\ILinkedNode|null">
            <type by_reference="false">\Data\ILinkedNode</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="36" package="Data\LinkedLists">
        <name>getLast</name>
        <full_name>getLast</full_name>
        <docblock line="30">
          <description>Returns the last element in the list.</description>
          <long-description></long-description>
          <tag line="30" name="access" description="public"/>
          <tag line="30" name="return" description="Returns the last ILinkedNode in the list, otherwise returns NULL." type="\Data\ILinkedNode|null">
            <type by_reference="false">\Data\ILinkedNode</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="49" package="Data\LinkedLists">
        <name>add</name>
        <full_name>add</full_name>
        <docblock line="38">
          <description>Adds a value onto the end of the list.</description>
          <long-description>&lt;p&gt;This method will create a new ILinkedNode instance assigning a
numeric key value to the node and the value is assigned to the
node's value property.&lt;/p&gt;</long-description>
          <tag line="38" name="access" description="public"/>
          <tag line="38" name="param" description="The value to add." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="38" name="return" description="The key value of the node that was created and added." type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="49">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="61" package="Data\LinkedLists">
        <name>addNode</name>
        <full_name>addNode</full_name>
        <docblock line="51">
          <description>Adds an ILinkedNode instance onto the end of the list.</description>
          <long-description>&lt;p&gt;The node that is to be added to the list should have its key reset so that
it is the next key in the list's key sequence.&lt;/p&gt;</long-description>
          <tag line="51" name="access" description="public"/>
          <tag line="51" name="param" description="The ILinkedNode to add." type="\Data\ILinkedNode" variable="$node">
            <type by_reference="false">\Data\ILinkedNode</type>
          </tag>
          <tag line="51" name="return" description="The key value of the node that was added." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="61">
          <name>$node</name>
          <default></default>
          <type>\Data\ILinkedNode</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="72" package="Data\LinkedLists">
        <name>asArray</name>
        <full_name>asArray</full_name>
        <docblock line="63">
          <description>Returns the list as an associative array.</description>
          <long-description>&lt;p&gt;The return array will be formatted so that each node within the list
will be returned as a key =&gt; value representation.&lt;/p&gt;</long-description>
          <tag line="63" name="access" description="public"/>
          <tag line="63" name="return" description="An associative array of key and value pairs for all nodes." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="81" package="Data\LinkedLists">
        <name>containsKey</name>
        <full_name>containsKey</full_name>
        <docblock line="74">
          <description>Checks if the list contains a node with the specified key value.</description>
          <long-description></long-description>
          <tag line="74" name="access" description="public"/>
          <tag line="74" name="param" description="Contains the key value to search for." type="mixed" variable="$key">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="74" name="return" description="Returns true if the $key was found, otherwise returns false." type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="81">
          <name>$key</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="90" package="Data\LinkedLists">
        <name>contains</name>
        <full_name>contains</full_name>
        <docblock line="83">
          <description>Checks if the list contains a node with the specified value.</description>
          <long-description></long-description>
          <tag line="83" name="access" description="public"/>
          <tag line="83" name="param" description="Contains the value to search for." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="83" name="return" description="Returns true if the $value was found, otherwise returns false." type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="90">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="99" package="Data\LinkedLists">
        <name>find</name>
        <full_name>find</full_name>
        <docblock line="92">
          <description>Returns the ILinkedNode object by the specified value.</description>
          <long-description></long-description>
          <tag line="92" name="access" description="public"/>
          <tag line="92" name="param" description="Contains the value to find." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="92" name="return" description="Returns the first ILinkedNode that contains the value, otherwise null." type="\Data\ILinkedNode|null">
            <type by_reference="false">\Data\ILinkedNode</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="99">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="108" package="Data\LinkedLists">
        <name>findAll</name>
        <full_name>findAll</full_name>
        <docblock line="101">
          <description>Returns an array of all ILinkedNodes found by the specified value.</description>
          <long-description></long-description>
          <tag line="101" name="access" description="public"/>
          <tag line="101" name="param" description="Contains the value to find." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="101" name="return" description="Returns an array with all the ILinkedNode instances whose value is equal to $value, otherwise returns null." type="array|null">
            <type by_reference="false">array</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="108">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="116" package="Data\LinkedLists">
        <name>findFirst</name>
        <full_name>findFirst</full_name>
        <docblock line="110">
          <description>Returns the first ILinkedNode instance found by with the specified value.</description>
          <long-description></long-description>
          <tag line="110" name="access" description="public"/>
          <tag line="110" name="param" description="" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="116">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="128" package="Data\LinkedLists">
        <name>findLast</name>
        <full_name>findLast</full_name>
        <docblock line="118">
          <description>Returns the last ILinkedNode instance found by the specified value.</description>
          <long-description>&lt;p&gt;The searching operations for this method are in reverse, therefore starting at the
bottom of the list. This is done so on purpose to reduce unneeded overhead.&lt;/p&gt;</long-description>
          <tag line="118" name="access" description="public"/>
          <tag line="118" name="param" description="Contains the value to find." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="118" name="return" description="Returns the last ILinkedNode that contains the value, otherwise null if none found." type="\Data\ILinkedNode|null">
            <type by_reference="false">\Data\ILinkedNode</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="128">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="137" package="Data\LinkedLists">
        <name>get</name>
        <full_name>get</full_name>
        <docblock line="130">
          <description>Returns the ILinkedNode at the specified $key.</description>
          <long-description></long-description>
          <tag line="130" name="access" description="public"/>
          <tag line="130" name="param" description="Contains the key of the ILinkedNode to get." type="mixed" variable="$key">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="130" name="return" description="Returns the ILinkedNode at $key if found, otherwise null." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="137">
          <name>$key</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="152" package="Data\LinkedLists">
        <name>insertBefore</name>
        <full_name>insertBefore</full_name>
        <docblock line="139">
          <description>Inserts a new ILinkedNode at before the specified key.</description>
          <long-description>&lt;p&gt;The ILinkedNode instance is created within this method. When inserting, all nodes should
be shifted and key values shifted as well for all nodes that follow this newly inserted.
Additionally, when inserting a new ILinkedNode, the key will be automatically generated as the
next numeric value in the sequence of nodes.&lt;/p&gt;</long-description>
          <tag line="139" name="access" description="public"/>
          <tag line="139" name="param" description="Contains the key value to insert a new ILinkedNode before." type="int" variable="$before">
            <type by_reference="false">int</type>
          </tag>
          <tag line="139" name="param" description="Contains the value used to create a new ILinkedNode with and inserted before $before." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="139" name="return" description="Returns the newly create ILinkedNode's key." type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="152">
          <name>$before</name>
          <default></default>
          <type/>
        </argument>
        <argument line="152">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="167" package="Data\LinkedLists">
        <name>insertAfter</name>
        <full_name>insertAfter</full_name>
        <docblock line="154">
          <description>Inserts a new ILinkedNode after the specified key.</description>
          <long-description>&lt;p&gt;The ILinkedNode instance is created within this method. When inserting, all nodes that are
to follow (come after) this node should be shifted and key values shifted as well.
Additionally, when inserting a new ILinkedNode, the key will be automatically generated
the next numeric value in the sequence of nodes.&lt;/p&gt;</long-description>
          <tag line="154" name="access" description="public"/>
          <tag line="154" name="param" description="Contains the key value to insert a new ILinkedNode after." type="int" variable="$after">
            <type by_reference="false">int</type>
          </tag>
          <tag line="154" name="param" description="Contains the value used to create a new ILinkedNode with and inserted before $after." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="154" name="return" description="Returns the newly create ILinkedNode's key." type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="167">
          <name>$after</name>
          <default></default>
          <type/>
        </argument>
        <argument line="167">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="175" package="Data\LinkedLists">
        <name>isEmpty</name>
        <full_name>isEmpty</full_name>
        <docblock line="169">
          <description>Returns a boolean to represent whether or not this list is empty.</description>
          <long-description></long-description>
          <tag line="169" name="access" description="public"/>
          <tag line="169" name="return" description="Returns true if the list is empty, otherwise returns false." type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="183" package="Data\LinkedLists">
        <name>peek</name>
        <full_name>peek</full_name>
        <docblock line="177">
          <description>Returns, but does not remove, the first node in the list.</description>
          <long-description></long-description>
          <tag line="177" name="access" description="public"/>
          <tag line="177" name="return" description="Returns the first node in the list. Will returns NULL if the list empty." type="\Data\ILinkedNode|null">
            <type by_reference="false">\Data\ILinkedNode</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="191" package="Data\LinkedLists">
        <name>peekFirst</name>
        <full_name>peekFirst</full_name>
        <docblock line="185">
          <description>Returns, but does not remove, the first node in the list.</description>
          <long-description></long-description>
          <tag line="185" name="access" description="public"/>
          <tag line="185" name="return" description="Returns the first node in the list. Will returns NULL if the list empty." type="\Data\ILinkedNode|null">
            <type by_reference="false">\Data\ILinkedNode</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="199" package="Data\LinkedLists">
        <name>peekLast</name>
        <full_name>peekLast</full_name>
        <docblock line="193">
          <description>Returns, but does not remove, the last node in the list.</description>
          <long-description></long-description>
          <tag line="193" name="access" description="public"/>
          <tag line="193" name="return" description="Returns the last node in the list. Will returns NULL if the list empty." type="\Data\ILinkedNode|null">
            <type by_reference="false">\Data\ILinkedNode</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="207" package="Data\LinkedLists">
        <name>poll</name>
        <full_name>poll</full_name>
        <docblock line="201">
          <description>Returns and removes the first node in the list.</description>
          <long-description></long-description>
          <tag line="201" name="access" description="public"/>
          <tag line="201" name="return" description="Returns the first node in the list. Will return NULL if the list is empty." type="\Data\ILinkedNode|null">
            <type by_reference="false">\Data\ILinkedNode</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="215" package="Data\LinkedLists">
        <name>pollFirst</name>
        <full_name>pollFirst</full_name>
        <docblock line="209">
          <description>Returns and removes the first node in the list.</description>
          <long-description></long-description>
          <tag line="209" name="access" description="public"/>
          <tag line="209" name="return" description="Returns the first node in the list. Will return NULL if the list is empty." type="\Data\ILinkedNode|null">
            <type by_reference="false">\Data\ILinkedNode</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="223" package="Data\LinkedLists">
        <name>pollLast</name>
        <full_name>pollLast</full_name>
        <docblock line="217">
          <description>Returns and removes the last node in the list.</description>
          <long-description></long-description>
          <tag line="217" name="access" description="public"/>
          <tag line="217" name="return" description="Returns the last node in the list. Will return NULL if the list is empty." type="\Data\ILinkedNode|null">
            <type by_reference="false">\Data\ILinkedNode</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="231" package="Data\LinkedLists">
        <name>pop</name>
        <full_name>pop</full_name>
        <docblock line="225">
          <description>Returns the last node's value and removes the last node in the list.</description>
          <long-description></long-description>
          <tag line="225" name="access" description="public"/>
          <tag line="225" name="return" description="Returns the last node value in the list. Will return NULL if the list empty." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="242" package="Data\LinkedLists">
        <name>push</name>
        <full_name>push</full_name>
        <docblock line="233">
          <description>Adds a new value onto the end of the list.</description>
          <long-description>&lt;p&gt;A new ILinkedNode instance will be created and the value assigned to the specified. A numeric
key will be created based on the sequence (last numeric key + 1) and assigned to this node.&lt;/p&gt;</long-description>
          <tag line="233" name="access" description="public"/>
          <tag line="233" name="param" description="Contains the value to push onto the list." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="242">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="253" package="Data\LinkedLists">
        <name>remove</name>
        <full_name>remove</full_name>
        <docblock line="244">
          <description>Removes all nodes whose value is equal to that specified.</description>
          <long-description>&lt;p&gt;Will remove all nodes within the list in addition to shifting and adjusting their
keys, for those that are within a numeric sequence.&lt;/p&gt;</long-description>
          <tag line="244" name="access" description="public"/>
          <tag line="244" name="param" description="Contains the value to remove." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="253">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="264" package="Data\LinkedLists">
        <name>removeAt</name>
        <full_name>removeAt</full_name>
        <docblock line="255">
          <description>Removes the node that lives at the specified key.</description>
          <long-description>&lt;p&gt;Will remove the node at $key within the list in addition to shifting and adjusting the keys for
remaining nodes that follow the removed.&lt;/p&gt;</long-description>
          <tag line="255" name="access" description="public"/>
          <tag line="255" name="param" description="Contains the value to remove." type="mixed" variable="$key">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="264">
          <name>$key</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="271" package="Data\LinkedLists">
        <name>removeFirst</name>
        <full_name>removeFirst</full_name>
        <docblock line="266">
          <description>Removes the first node from the list.</description>
          <long-description></long-description>
          <tag line="266" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="278" package="Data\LinkedLists">
        <name>removeLast</name>
        <full_name>removeLast</full_name>
        <docblock line="273">
          <description>Removes the last node from the list.</description>
          <long-description></long-description>
          <tag line="273" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="289" package="Data\LinkedLists">
        <name>removeNode</name>
        <full_name>removeNode</full_name>
        <docblock line="280">
          <description>Removes the specified node from the list.</description>
          <long-description>&lt;p&gt;If the node exists, it will be removed and all nodes that follow will be shifted and their keys
will be adjusted.&lt;/p&gt;</long-description>
          <tag line="280" name="access" description="public"/>
          <tag line="280" name="param" description="The node to remove from the list." type="\Data\ILinkedNode" variable="$node">
            <type by_reference="false">\Data\ILinkedNode</type>
          </tag>
        </docblock>
        <argument line="289">
          <name>$node</name>
          <default></default>
          <type>\Data\ILinkedNode</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="299" package="Data\LinkedLists">
        <name>sort</name>
        <full_name>sort</full_name>
        <docblock line="291">
          <description>Sorts the list by the node values.</description>
          <long-description>&lt;p&gt;The keys of all moved nodes will be adjusted so that the numeric key sequence
remains (n - 1) + 1 for all nodes.&lt;/p&gt;</long-description>
          <tag line="291" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="310" package="Data\LinkedLists">
        <name>sortBy</name>
        <full_name>sortBy</full_name>
        <docblock line="301">
          <description>Sorts the list by using a callback to specify the value to compare on.</description>
          <long-description>&lt;p&gt;The callback should take one parameter of type ILinkedNode and return a single
value that will be used for comparison.&lt;/p&gt;</long-description>
          <tag line="301" name="access" description="public"/>
          <tag line="301" name="param" description="The specified callback." type="callable" variable="$predicate">
            <type by_reference="false">callable</type>
          </tag>
        </docblock>
        <argument line="310">
          <name>$predicate</name>
          <default></default>
          <type>callable</type>
        </argument>
      </method>
    </interface>
  </file>
  <file path="LinkedLists/SinglyLinkedNode.php" hash="e94abf3175db3f45917e26a1b0819736" package="Default">
    <docblock line="2">
      <description>This file is part of the Data package.</description>
      <long-description>&lt;p&gt;For full copyright and license information, please view the LICENSE
file that was distributed with this source code.&lt;/p&gt;</long-description>
    </docblock>
    <class final="false" abstract="false" namespace="Data\LinkedLists" line="18" package="Data\LinkedLists">
      <extends/>
      <implements>\Data\ILinkedNode</implements>
      <name>SinglyLinkedNode</name>
      <full_name>\Data\LinkedLists\SinglyLinkedNode</full_name>
      <docblock line="10">
        <description>SinglyLinkedNode Class</description>
        <long-description></long-description>
        <tag line="10" name="package" description="Data\LinkedLists"/>
        <tag line="10" name="author" description="Jeremy Mills &lt;j_mills44@fanshaweonline.ca&gt;"/>
        <tag line="10" name="copyright" description="(c) Jeremy Mills"/>
        <tag line="10" name="version" description="1.0.0"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="26" namespace="Data\LinkedLists" package="Default">
        <name>$_value</name>
        <default></default>
        <docblock line="20">
          <description>Private Mem Var to hold the $data object</description>
          <long-description></long-description>
          <tag line="20" name="access" description="private"/>
          <tag line="20" name="var" description="datatype to hold node data" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="33" namespace="Data\LinkedLists" package="Default">
        <name>$_key</name>
        <default></default>
        <docblock line="27">
          <description>Private Mem Var to hold the $data object</description>
          <long-description></long-description>
          <tag line="27" name="access" description="private"/>
          <tag line="27" name="var" description="key to hold data location" type="double">
            <type by_reference="false">double</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="40" namespace="Data\LinkedLists" package="Default">
        <name>$_next</name>
        <default></default>
        <docblock line="34">
          <description>Private Mem Var to hold the $data object</description>
          <long-description></long-description>
          <tag line="34" name="access" description="private"/>
          <tag line="34" name="var" description="position variable pointing to the next node in sequence" type="\Data\LinkedLists\SinglyLinkedNode">
            <type by_reference="false">\Data\LinkedLists\SinglyLinkedNode</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="49" package="Data\LinkedLists">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="43">
          <description>Constructor for Node class</description>
          <long-description></long-description>
          <tag line="43" name="access" description="public"/>
          <tag line="43" name="param" description="The node to be created" type="\Data\LinkedLists\SinglyLinkedNode" variable="$value">
            <type by_reference="false">\Data\LinkedLists\SinglyLinkedNode</type>
          </tag>
        </docblock>
        <argument line="49">
          <name>$value</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="62" package="Data\LinkedLists">
        <name>getNext</name>
        <full_name>getNext</full_name>
        <docblock line="56">
          <description>Returns the next ILinkedNode.</description>
          <long-description></long-description>
          <tag line="56" name="access" description="public"/>
          <tag line="56" name="return" description="Returns the next ILinkedNode instance if it exists, otherwise returns NULL." type="\Data\LinkedLists\ILinkedNode|null">
            <type by_reference="false">\Data\LinkedLists\ILinkedNode</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="76" package="Data\LinkedLists">
        <name>setNext</name>
        <full_name>setNext</full_name>
        <docblock line="67">
          <description>Sets the next ILinkedNode instance.</description>
          <long-description>&lt;p&gt;The 'next' ILinkedNode should be the ILinkedNode instance that comes after
this instance within a List.&lt;/p&gt;</long-description>
          <tag line="67" name="access" description="public"/>
          <tag line="67" name="param" description="The ILinkedNode instance that is next." type="\Data\ILinkedNode" variable="$next">
            <type by_reference="false">\Data\ILinkedNode</type>
          </tag>
        </docblock>
        <argument line="76">
          <name>$next</name>
          <default>null</default>
          <type>\Data\ILinkedNode</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="87" package="Data\LinkedLists">
        <name>getKey</name>
        <full_name>getKey</full_name>
        <docblock line="81">
          <description>Returns the key value for this node.</description>
          <long-description></long-description>
          <tag line="81" name="access" description="public"/>
          <tag line="81" name="return" description="Returns the key value." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="98" package="Data\LinkedLists">
        <name>setKey</name>
        <full_name>setKey</full_name>
        <docblock line="92">
          <description>Sets the key value for this node.</description>
          <long-description></long-description>
          <tag line="92" name="access" description="public"/>
          <tag line="92" name="param" description="The key value." type="mixed" variable="$key">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="98">
          <name>$key</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="109" package="Data\LinkedLists">
        <name>getValue</name>
        <full_name>getValue</full_name>
        <docblock line="103">
          <description>Returns the value of this node (the real value assigned).</description>
          <long-description></long-description>
          <tag line="103" name="access" description="public"/>
          <tag line="103" name="return" description="The value." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="120" package="Data\LinkedLists">
        <name>setValue</name>
        <full_name>setValue</full_name>
        <docblock line="114">
          <description>Sets the value for this node.</description>
          <long-description></long-description>
          <tag line="114" name="access" description="public"/>
          <tag line="114" name="param" description="The value." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="120">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="LinkedLists/DoublyLinkedList.php" hash="c404e56414f3dacca9ff1ef5a09ab761" package="Default">
    <docblock line="2">
      <description>This file is part of the Data package.</description>
      <long-description>&lt;p&gt;For full copyright and license information, please view the LICENSE
file that was distributed with this source code.&lt;/p&gt;</long-description>
    </docblock>
    <class final="false" abstract="false" namespace="Data\LinkedLists" line="18" package="Data\LinkedLists">
      <extends>\Data\LinkedLists\SinglyLinkedList</extends>
      <name>DoublyLinkedList</name>
      <full_name>\Data\LinkedLists\DoublyLinkedList</full_name>
      <docblock line="10">
        <description>DoublyLinkedList class</description>
        <long-description></long-description>
        <tag line="10" name="package" description="Data\LinkedLists"/>
        <tag line="10" name="author" description="Jeremy Mills &lt;j_mills44@fanshaweonline.ca&gt;"/>
        <tag line="10" name="copyright" description="(c) Jeremy Mills"/>
        <tag line="10" name="version" description="1.0.0"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="50" package="Data\LinkedLists">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="45">
          <description>Construct DoublyLinkedList class</description>
          <long-description></long-description>
          <tag line="45" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="60" package="Data\LinkedLists">
        <name>getFirst</name>
        <full_name>getFirst</full_name>
        <docblock line="54">
          <description>Returns the first element in the list.</description>
          <long-description></long-description>
          <tag line="54" name="access" description="public"/>
          <tag line="54" name="return" description="Returns the first DoublyLinkedNode in the list, otherwise returns NULL." type="\Data\LinkedLists\DoublyLinkedNode|null">
            <type by_reference="false">\Data\LinkedLists\DoublyLinkedNode</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="72" package="Data\LinkedLists">
        <name>getLast</name>
        <full_name>getLast</full_name>
        <docblock line="66">
          <description>Returns the last element in the list.</description>
          <long-description></long-description>
          <tag line="66" name="access" description="public"/>
          <tag line="66" name="return" description="Returns the last DoublyLinkedNode in the list, otherwise returns NULL." type="\Data\LinkedLists\DoublyLinkedNode|null">
            <type by_reference="false">\Data\LinkedLists\DoublyLinkedNode</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="88" package="Data\LinkedLists">
        <name>add</name>
        <full_name>add</full_name>
        <docblock line="77">
          <description>Adds a value onto the end of the list.</description>
          <long-description>&lt;p&gt;This method will create a new DoublyLinkedNode instance assigning a
numeric key value to the node and the value is assigned to the
node's value property.&lt;/p&gt;</long-description>
          <tag line="77" name="access" description="public"/>
          <tag line="77" name="param" description="The value to add." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="77" name="return" description="The key value of the node that was created and added." type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="88">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="104" package="Data\LinkedLists">
        <name>addNode</name>
        <full_name>addNode</full_name>
        <docblock line="94">
          <description>Adds an IDoublyLinkedNode instance onto the end of the list.</description>
          <long-description>&lt;p&gt;The node that is to be added to the list should have its key reset so that
it is the next key in the list's key sequence.&lt;/p&gt;</long-description>
          <tag line="94" name="access" description="public"/>
          <tag line="94" name="param" description="The IDoublyLinkedNode to add." type="\Data\ILinkedNode" variable="$node">
            <type by_reference="false">\Data\ILinkedNode</type>
          </tag>
          <tag line="94" name="return" description="The key value of the node that was added." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="104">
          <name>$node</name>
          <default></default>
          <type>\Data\ILinkedNode</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="134" package="Data\LinkedLists">
        <name>asArray</name>
        <full_name>asArray</full_name>
        <docblock line="125">
          <description>Returns the list as an associative array.</description>
          <long-description>&lt;p&gt;The return array will be formatted so that each node within the list
will be returned as a key =&gt; value representation.&lt;/p&gt;</long-description>
          <tag line="125" name="access" description="public"/>
          <tag line="125" name="return" description="An associative array of key and value pairs for all nodes." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="146" package="Data\LinkedLists">
        <name>containsKey</name>
        <full_name>containsKey</full_name>
        <docblock line="139">
          <description>Checks if the list contains a node with the specified key value.</description>
          <long-description></long-description>
          <tag line="139" name="access" description="public"/>
          <tag line="139" name="param" description="Contains the key value to search for." type="mixed" variable="$key">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="139" name="return" description="Returns true if the $key was found, otherwise returns false." type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="146">
          <name>$key</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="158" package="Data\LinkedLists">
        <name>contains</name>
        <full_name>contains</full_name>
        <docblock line="151">
          <description>Checks if the list contains a node with the specified value.</description>
          <long-description></long-description>
          <tag line="151" name="access" description="public"/>
          <tag line="151" name="param" description="Contains the value to search for." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="151" name="return" description="Returns true if the $value was found, otherwise returns false." type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="158">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="169" package="Data\LinkedLists">
        <name>count</name>
        <full_name>count</full_name>
        <docblock line="163">
          <description>returns the size of the linked List</description>
          <long-description></long-description>
          <tag line="163" name="access" description="public"/>
          <tag line="163" name="return" description="size of the linked list" type="double">
            <type by_reference="false">double</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="181" package="Data\LinkedLists">
        <name>find</name>
        <full_name>find</full_name>
        <docblock line="174">
          <description>Returns the IDoublyLinkedNode object by the specified value.</description>
          <long-description></long-description>
          <tag line="174" name="access" description="public"/>
          <tag line="174" name="param" description="Contains the value to find." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="174" name="return" description="Returns the first IDoublyLinkedNode that contains the value, otherwise null." type="\Data\LinkedLists\IDoublyLinkedNode|null">
            <type by_reference="false">\Data\LinkedLists\IDoublyLinkedNode</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="181">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="194" package="Data\LinkedLists">
        <name>findAll</name>
        <full_name>findAll</full_name>
        <docblock line="186">
          <description>Returns an array of all IDoublyLinkedNodes found by the specified value.</description>
          <long-description></long-description>
          <tag line="186" name="access" description="public"/>
          <tag line="186" name="param" description="Contains the value to find." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="186" name="return" description="Returns an array with all the&#10;IDoublyLinkedNode instances whose value is equal to $value, otherwise returns null." type="array|null">
            <type by_reference="false">array</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="194">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="206" package="Data\LinkedLists">
        <name>findFirst</name>
        <full_name>findFirst</full_name>
        <docblock line="199">
          <description>Returns the first IDoublyLinkedNode instance found by with the specified value.</description>
          <long-description></long-description>
          <tag line="199" name="access" description="public"/>
          <tag line="199" name="param" description="" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="199" name="return" description="returns the first instance found with sepcified value" type="\Data\LinkedLists\IDoublyLinkedNode|null">
            <type by_reference="false">\Data\LinkedLists\IDoublyLinkedNode</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="206">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="222" package="Data\LinkedLists">
        <name>findLast</name>
        <full_name>findLast</full_name>
        <docblock line="211">
          <description>Returns the last IDoublyLinkedNode instance found by the specified value.</description>
          <long-description>&lt;p&gt;The searching operations for this method are in reverse, therefore starting at the
bottom of the list. This is done so on purpose to reduce unneeded overhead.&lt;/p&gt;</long-description>
          <tag line="211" name="access" description="public"/>
          <tag line="211" name="param" description="Contains the value to find." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="211" name="return" description="Returns the last&#10;IDoublyLinkedNode that contains the value, otherwise null if none found." type="\Data\LinkedLists\IDoublyLinkedNode|null">
            <type by_reference="false">\Data\LinkedLists\IDoublyLinkedNode</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="222">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="241" package="Data\LinkedLists">
        <name>get</name>
        <full_name>get</full_name>
        <docblock line="234">
          <description>Returns the IDoublyLinkedNode at the specified $key.</description>
          <long-description></long-description>
          <tag line="234" name="access" description="public"/>
          <tag line="234" name="param" description="Contains the key of the IDoublyLinkedNode to get." type="mixed" variable="$key">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="234" name="return" description="Returns the IDoublyLinkedNode at $key if found, otherwise null." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="241">
          <name>$key</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="259" package="Data\LinkedLists">
        <name>insertBefore</name>
        <full_name>insertBefore</full_name>
        <docblock line="246">
          <description>Inserts a new IDoublyLinkedNode at before the specified key.</description>
          <long-description>&lt;p&gt;The IDoublyLinkedNode instance is created within this method. When inserting, all nodes should
be shifted and key values shifted as well for all nodes that follow this newly inserted.
Additionally, when inserting a new IDoublyLinkedNode, the key will be automatically generated as the
next numeric value in the sequence of nodes.&lt;/p&gt;</long-description>
          <tag line="246" name="access" description="public"/>
          <tag line="246" name="param" description="Contains the key value to insert a new IDoublyLinkedNode before." type="int" variable="$before">
            <type by_reference="false">int</type>
          </tag>
          <tag line="246" name="param" description="Contains the value used to create a new IDoublyLinkedNode with and inserted before   $before." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="246" name="return" description="Returns the newly create IDoublyLinkedNode's key." type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="259">
          <name>$before</name>
          <default></default>
          <type/>
        </argument>
        <argument line="259">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="294" package="Data\LinkedLists">
        <name>insertAfter</name>
        <full_name>insertAfter</full_name>
        <docblock line="281">
          <description>Inserts a new IDoublyLinkedNode after the specified key.</description>
          <long-description>&lt;p&gt;The IDoublyLinkedNode instance is created within this method. When inserting, all nodes that are
to follow (come after) this node should be shifted and key values shifted as well.
Additionally, when inserting a new IDoublyLinkedNode, the key will be automatically generated
the next numeric value in the sequence of nodes.&lt;/p&gt;</long-description>
          <tag line="281" name="access" description="public"/>
          <tag line="281" name="param" description="Contains the key value to insert a new IDoublyLinkedNode after." type="int" variable="$after">
            <type by_reference="false">int</type>
          </tag>
          <tag line="281" name="param" description="Contains the value used to create a new IDoublyLinkedNode with and inserted before $after." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="281" name="return" description="Returns the newly create IDoublyLinkedNode's key." type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="294">
          <name>$after</name>
          <default></default>
          <type/>
        </argument>
        <argument line="294">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="317" package="Data\LinkedLists">
        <name>isEmpty</name>
        <full_name>isEmpty</full_name>
        <docblock line="311">
          <description>Returns a boolean to represent whether or not this list is empty.</description>
          <long-description></long-description>
          <tag line="311" name="access" description="public"/>
          <tag line="311" name="return" description="Returns true if the list is empty, otherwise returns false." type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="329" package="Data\LinkedLists">
        <name>peek</name>
        <full_name>peek</full_name>
        <docblock line="323">
          <description>Returns, but does not remove, the first node in the list.</description>
          <long-description></long-description>
          <tag line="323" name="access" description="public"/>
          <tag line="323" name="return" description="Returns the first node in the list. Will returns NULL if the list empty." type="\Data\LinkedLists\IDoublyLinkedNode|null">
            <type by_reference="false">\Data\LinkedLists\IDoublyLinkedNode</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="340" package="Data\LinkedLists">
        <name>peekFirst</name>
        <full_name>peekFirst</full_name>
        <docblock line="334">
          <description>Returns, but does not remove, the first node in the list.</description>
          <long-description></long-description>
          <tag line="334" name="access" description="public"/>
          <tag line="334" name="return" description="Returns the first node in the list. Will returns NULL if the list empty." type="\Data\LinkedLists\IDoublyLinkedNode|null">
            <type by_reference="false">\Data\LinkedLists\IDoublyLinkedNode</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="352" package="Data\LinkedLists">
        <name>peekLast</name>
        <full_name>peekLast</full_name>
        <docblock line="346">
          <description>Returns, but does not remove, the last node in the list.</description>
          <long-description></long-description>
          <tag line="346" name="access" description="public"/>
          <tag line="346" name="return" description="Returns the last node in the list. Will returns NULL if the list empty." type="\Data\LinkedLists\IDoublyLinkedNode|null">
            <type by_reference="false">\Data\LinkedLists\IDoublyLinkedNode</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="364" package="Data\LinkedLists">
        <name>poll</name>
        <full_name>poll</full_name>
        <docblock line="358">
          <description>Returns and removes the first node in the list.</description>
          <long-description></long-description>
          <tag line="358" name="access" description="public"/>
          <tag line="358" name="return" description="Returns the first node in the list. Will return NULL if the list is empty." type="\Data\LinkedLists\IDoublyLinkedNode|null">
            <type by_reference="false">\Data\LinkedLists\IDoublyLinkedNode</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="375" package="Data\LinkedLists">
        <name>pollFirst</name>
        <full_name>pollFirst</full_name>
        <docblock line="369">
          <description>Returns and removes the first node in the list.</description>
          <long-description></long-description>
          <tag line="369" name="access" description="public"/>
          <tag line="369" name="return" description="Returns the first node in the list. Will return NULL if the list is empty." type="\Data\LinkedLists\IDoublyLinkedNode|null">
            <type by_reference="false">\Data\LinkedLists\IDoublyLinkedNode</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="394" package="Data\LinkedLists">
        <name>pollLast</name>
        <full_name>pollLast</full_name>
        <docblock line="388">
          <description>Returns and removes the last node in the list.</description>
          <long-description></long-description>
          <tag line="388" name="access" description="public"/>
          <tag line="388" name="return" description="Returns the last node in the list. Will return NULL if the list is empty." type="\Data\LinkedLists\IDoublyLinkedNode|null">
            <type by_reference="false">\Data\LinkedLists\IDoublyLinkedNode</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="410" package="Data\LinkedLists">
        <name>pop</name>
        <full_name>pop</full_name>
        <docblock line="404">
          <description>Returns the last node's value and removes the last node in the list.</description>
          <long-description></long-description>
          <tag line="404" name="access" description="public"/>
          <tag line="404" name="return" description="Returns the last node value in the list. Will return NULL if the list empty." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="424" package="Data\LinkedLists">
        <name>push</name>
        <full_name>push</full_name>
        <docblock line="415">
          <description>Adds a new value onto the end of the list.</description>
          <long-description>&lt;p&gt;A new IDoublyLinkedNode instance will be created and the value assigned to the specified. A numeric
key will be created based on the sequence (last numeric key + 1) and assigned to this node.&lt;/p&gt;</long-description>
          <tag line="415" name="access" description="public"/>
          <tag line="415" name="param" description="Contains the value to push onto the list." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="424">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="441" package="Data\LinkedLists">
        <name>remove</name>
        <full_name>remove</full_name>
        <docblock line="432">
          <description>Removes all nodes whose value is equal to that specified.</description>
          <long-description>&lt;p&gt;Will remove all nodes within the list in addition to shifting and adjusting their
keys, for those that are within a numeric sequence.&lt;/p&gt;</long-description>
          <tag line="432" name="access" description="public"/>
          <tag line="432" name="param" description="Contains the value to remove." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="441">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="470" package="Data\LinkedLists">
        <name>removeAt</name>
        <full_name>removeAt</full_name>
        <docblock line="461">
          <description>Removes the node that lives at the specified key.</description>
          <long-description>&lt;p&gt;Will remove the node at $key within the list in addition to shifting and adjusting the keys for
remaining nodes that follow the removed.&lt;/p&gt;</long-description>
          <tag line="461" name="access" description="public"/>
          <tag line="461" name="param" description="Contains the value to remove." type="mixed" variable="$key">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="470">
          <name>$key</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="498" package="Data\LinkedLists">
        <name>removeFirst</name>
        <full_name>removeFirst</full_name>
        <docblock line="493">
          <description>Removes the first node from the list.</description>
          <long-description></long-description>
          <tag line="493" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="516" package="Data\LinkedLists">
        <name>removeLast</name>
        <full_name>removeLast</full_name>
        <docblock line="511">
          <description>Removes the last node from the list.</description>
          <long-description></long-description>
          <tag line="511" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="536" package="Data\LinkedLists">
        <name>removeNode</name>
        <full_name>removeNode</full_name>
        <docblock line="527">
          <description>Removes the specified node from the list.</description>
          <long-description>&lt;p&gt;If the node exists, it will be removed and all nodes that follow will be shifted and their keys
will be adjusted.&lt;/p&gt;</long-description>
          <tag line="527" name="access" description="public"/>
          <tag line="527" name="param" description="The node to remove from the list." type="\Data\ILinkedNode" variable="$node">
            <type by_reference="false">\Data\ILinkedNode</type>
          </tag>
        </docblock>
        <argument line="536">
          <name>$node</name>
          <default></default>
          <type>\Data\ILinkedNode</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="564" package="Data\LinkedLists">
        <name>sort</name>
        <full_name>sort</full_name>
        <docblock line="556">
          <description>Sorts the list by the node values.</description>
          <long-description>&lt;p&gt;The keys of all moved nodes will be adjusted so that the numeric key sequence
remains (n - 1) + 1 for all nodes.&lt;/p&gt;</long-description>
          <tag line="556" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="578" package="Data\LinkedLists">
        <name>sortBy</name>
        <full_name>sortBy</full_name>
        <docblock line="569">
          <description>Sorts the list by using a callback to specify the value to compare on.</description>
          <long-description>&lt;p&gt;The callback should take one parameter of type IDoublyLinkedNode and return a single
value that will be used for comparison.&lt;/p&gt;</long-description>
          <tag line="569" name="access" description="public"/>
          <tag line="569" name="param" description="The specified callback." type="callable" variable="$predicate">
            <type by_reference="false">callable</type>
          </tag>
        </docblock>
        <argument line="578">
          <name>$predicate</name>
          <default></default>
          <type>callable</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="608" package="Data\LinkedLists">
        <name>sortAscending</name>
        <full_name>sortAscending</full_name>
        <docblock line="600">
          <description>Sort Ascending Function to sort given list with ascending property</description>
          <long-description></long-description>
          <tag line="600" name="access" description="public"/>
          <tag line="600" name="return" description="will return 0 | 1 | -1 depending on the given ascending order" type="double">
            <type by_reference="false">double</type>
          </tag>
          <tag line="600" name="param" description="left hand side" type="\Data\LinkedLists\DoublyLinkedNode" variable="$link">
            <type by_reference="false">\Data\LinkedLists\DoublyLinkedNode</type>
          </tag>
          <tag line="600" name="param" description="right hand side" type="\Data\LinkedLists\DoublyLinkedNode" variable="$next">
            <type by_reference="false">\Data\LinkedLists\DoublyLinkedNode</type>
          </tag>
        </docblock>
        <argument line="608">
          <name>$link</name>
          <default></default>
          <type>\Data\LinkedLists\DoublyLinkedNode</type>
        </argument>
        <argument line="608">
          <name>$next</name>
          <default></default>
          <type>\Data\LinkedLists\DoublyLinkedNode</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="622" package="Data\LinkedLists">
        <name>__toString</name>
        <full_name>__toString</full_name>
        <docblock line="617">
          <description>ToString function to preview the sorted linked list in String format</description>
          <long-description></long-description>
          <tag line="617" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="643" package="Data\LinkedLists">
        <name>getIterator</name>
        <full_name>getIterator</full_name>
        <docblock line="638">
          <description>getIterator function to be implemented</description>
          <long-description></long-description>
          <tag line="638" name="access" description="public"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="LinkedLists/IDoublyLinkedList.php" hash="6a4ba14b7037fc27e7ec8ecffbf923dd" package="Default">
    <docblock line="2">
      <description>This file is part of the Data package.</description>
      <long-description>&lt;p&gt;For full copyright and license information, please view the LICENSE
file that was distributed with this source code.&lt;/p&gt;</long-description>
    </docblock>
    <interface namespace="Data\LinkedLists" line="19" package="Data\LinkedList">
      <name>IDoublyLinkedList</name>
      <full_name>\Data\LinkedLists\IDoublyLinkedList</full_name>
      <extends>\Data\LinkedLists\ILinkedList</extends>
      <docblock line="10">
        <description>ILinkedList is the interface implemented by the LinkedList class or
any class that wishes to operate as a Linked List.</description>
        <long-description></long-description>
        <tag line="10" name="author" description="Aaron McGowan &lt;a_mcgowan43905@fanshawec.ca&gt;"/>
        <tag line="10" name="author" description="Jeremy Mills &lt;j_mills44@fanshaweonline.ca&gt;"/>
        <tag line="10" name="package" description="Data\LinkedList"/>
        <tag line="10" name="version" description="1.0.0"/>
      </docblock>
    </interface>
  </file>
  <file path="LinkedLists/SinglyLinkedList.php" hash="6d1c38279a6e81fe62b8ad38ed0b6573" package="Default">
    <docblock line="2">
      <description>This file is part of the Data package.</description>
      <long-description>&lt;p&gt;For full copyright and license information, please view the LICENSE
file that was distributed with this source code.&lt;/p&gt;</long-description>
    </docblock>
    <class final="false" abstract="false" namespace="Data\LinkedLists" line="19" package="Data\LinkedLists">
      <extends/>
      <implements>\Data\LinkedLists\ILinkedList</implements>
      <name>SinglyLinkedList</name>
      <full_name>\Data\LinkedLists\SinglyLinkedList</full_name>
      <docblock line="10">
        <description>SinglyLinkedList class</description>
        <long-description></long-description>
        <tag line="10" name="package" description="Data\LinkedLists"/>
        <tag line="10" name="author" description="Jeremy Mills &lt;j_mills44@fanshaweonline.ca&gt;"/>
        <tag line="10" name="copyright" description="(c) Jeremy Mills"/>
        <tag line="10" name="version" description="1.0.0"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="27" namespace="Data\LinkedLists" package="Default">
        <name>$_data</name>
        <default></default>
        <docblock line="21">
          <description>Private Mem Var to hold the current value of the ISinglyLinkedNode instance</description>
          <long-description></long-description>
          <tag line="21" name="access" description="private"/>
          <tag line="21" name="var" description="value to hold value location" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="34" namespace="Data\LinkedLists" package="Default">
        <name>$_size</name>
        <default>0</default>
        <docblock line="28">
          <description>Private Mem Var to hold the current size of list</description>
          <long-description></long-description>
          <tag line="28" name="access" description="private"/>
          <tag line="28" name="var" description="hold current node size" type="double">
            <type by_reference="false">double</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="41" namespace="Data\LinkedLists" package="Default">
        <name>$_firstNode</name>
        <default></default>
        <docblock line="35">
          <description>Private Mem Var to hold the root node of the List</description>
          <long-description></long-description>
          <tag line="35" name="access" description="private"/>
          <tag line="35" name="var" description="datatype to hold root node data" type="\Data\LinkedLists\SinglyLinkedNode">
            <type by_reference="false">\Data\LinkedLists\SinglyLinkedNode</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="47" namespace="Data\LinkedLists" package="Default">
        <name>$_lastNode</name>
        <default></default>
        <docblock line="42">
          <description>Private mem Var to hold the last node of the List</description>
          <long-description></long-description>
          <tag line="42" name="access" description="private"/>
          <tag line="42" name="var" description="datatype to hold last node data" type="\Data\LinkedLists\SinglyLinkedNode">
            <type by_reference="false">\Data\LinkedLists\SinglyLinkedNode</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="54" package="Data\LinkedLists">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="49">
          <description>Construct SinglyLinkedList class</description>
          <long-description></long-description>
          <tag line="49" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="65" package="Data\LinkedLists">
        <name>getFirst</name>
        <full_name>getFirst</full_name>
        <docblock line="58">
          <description>Returns the first element in the list.</description>
          <long-description></long-description>
          <tag line="58" name="access" description="public"/>
          <tag line="58" name="return" description="Returns the first ISinglyLinkedNode in the list,&#10;                               otherwise returns NULL." type="\Data\LinkedLists\ISinglyLinkedNode|null">
            <type by_reference="false">\Data\LinkedLists\ISinglyLinkedNode</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="76" package="Data\LinkedLists">
        <name>getLast</name>
        <full_name>getLast</full_name>
        <docblock line="70">
          <description>Returns the last element in the list.</description>
          <long-description></long-description>
          <tag line="70" name="access" description="public"/>
          <tag line="70" name="return" description="Returns the last ISinglyLinkedNode in the list, otherwise returns NULL." type="\Data\LinkedLists\ISinglyLinkedNode|null">
            <type by_reference="false">\Data\LinkedLists\ISinglyLinkedNode</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="104" package="Data\LinkedLists">
        <name>add</name>
        <full_name>add</full_name>
        <docblock line="93">
          <description>Adds a value onto the end of the list.</description>
          <long-description>&lt;p&gt;This method will create a new ISinglyLinkedNode instance assigning a
numeric key value to the node and the value is assigned to the
node's value property.&lt;/p&gt;</long-description>
          <tag line="93" name="access" description="public"/>
          <tag line="93" name="param" description="The value to add." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="93" name="return" description="The key value of the node that was created and added." type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="104">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="120" package="Data\LinkedLists">
        <name>addNode</name>
        <full_name>addNode</full_name>
        <docblock line="110">
          <description>Adds an ISinglyLinkedNode instance onto the end of the list.</description>
          <long-description>&lt;p&gt;The node that is to be added to the list should have its key reset so that
it is the next key in the list's key sequence.&lt;/p&gt;</long-description>
          <tag line="110" name="access" description="public"/>
          <tag line="110" name="param" description="The ISinglyLinkedNode to add." type="\Data\ILinkedNode" variable="$node">
            <type by_reference="false">\Data\ILinkedNode</type>
          </tag>
          <tag line="110" name="return" description="The key value of the node that was added." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="120">
          <name>$node</name>
          <default></default>
          <type>\Data\ILinkedNode</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="163" package="Data\LinkedLists">
        <name>asArray</name>
        <full_name>asArray</full_name>
        <docblock line="154">
          <description>Returns the list as an associative array.</description>
          <long-description>&lt;p&gt;The return array will be formatted so that each node within the list
will be returned as a key =&gt; value representation.&lt;/p&gt;</long-description>
          <tag line="154" name="access" description="public"/>
          <tag line="154" name="return" description="An associative array of key and value pairs for all nodes." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="181" package="Data\LinkedLists">
        <name>containsKey</name>
        <full_name>containsKey</full_name>
        <docblock line="174">
          <description>Checks if the list contains a node with the specified key value.</description>
          <long-description></long-description>
          <tag line="174" name="access" description="public"/>
          <tag line="174" name="param" description="Contains the key value to search for." type="mixed" variable="$key">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="174" name="return" description="Returns true if the $key was found, otherwise returns false." type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="181">
          <name>$key</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="200" package="Data\LinkedLists">
        <name>contains</name>
        <full_name>contains</full_name>
        <docblock line="193">
          <description>Checks if the list contains a node with the specified value.</description>
          <long-description></long-description>
          <tag line="193" name="access" description="public"/>
          <tag line="193" name="param" description="Contains the value to search for." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="193" name="return" description="Returns true if the $value was found, otherwise returns false." type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="200">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="218" package="Data\LinkedLists">
        <name>count</name>
        <full_name>count</full_name>
        <docblock line="212">
          <description>returns the size of the linked List</description>
          <long-description></long-description>
          <tag line="212" name="access" description="public"/>
          <tag line="212" name="return" description="size of the linked list" type="double">
            <type by_reference="false">double</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="230" package="Data\LinkedLists">
        <name>find</name>
        <full_name>find</full_name>
        <docblock line="223">
          <description>Returns the ISinglyLinkedNode object by the specified value.</description>
          <long-description></long-description>
          <tag line="223" name="access" description="public"/>
          <tag line="223" name="param" description="Contains the value to find." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="223" name="return" description="Returns the first ISinglyLinkedNode that contains the value, otherwise null." type="\Data\LinkedLists\ISinglyLinkedNode|null">
            <type by_reference="false">\Data\LinkedLists\ISinglyLinkedNode</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="230">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="243" package="Data\LinkedLists">
        <name>findAll</name>
        <full_name>findAll</full_name>
        <docblock line="235">
          <description>Returns an array of all ISinglyLinkedNodes found by the specified value.</description>
          <long-description></long-description>
          <tag line="235" name="access" description="public"/>
          <tag line="235" name="param" description="Contains the value to find." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="235" name="return" description="Returns an array with all the&#10;ISinglyLinkedNode instances whose value is equal to $value, otherwise returns null." type="array|null">
            <type by_reference="false">array</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="243">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="262" package="Data\LinkedLists">
        <name>findFirst</name>
        <full_name>findFirst</full_name>
        <docblock line="256">
          <description>Returns the first ISinglyLinkedNode instance found by with the specified value.</description>
          <long-description></long-description>
          <tag line="256" name="access" description="public"/>
          <tag line="256" name="param" description="" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="262">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="285" package="Data\LinkedLists">
        <name>findLast</name>
        <full_name>findLast</full_name>
        <docblock line="274">
          <description>Returns the last ISinglyLinkedNode instance found by the specified value.</description>
          <long-description>&lt;p&gt;The searching operations for this method are in reverse, therefore starting at the
bottom of the list. This is done so on purpose to reduce unneeded overhead.&lt;/p&gt;</long-description>
          <tag line="274" name="access" description="public"/>
          <tag line="274" name="param" description="Contains the value to find." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="274" name="return" description="Returns the last&#10;ISinglyLinkedNode that contains the value, otherwise null if none found." type="\Data\LinkedLists\ISinglyLinkedNode|null">
            <type by_reference="false">\Data\LinkedLists\ISinglyLinkedNode</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="285">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="309" package="Data\LinkedLists">
        <name>get</name>
        <full_name>get</full_name>
        <docblock line="302">
          <description>Returns the ISinglyLinkedNode at the specified $key.</description>
          <long-description></long-description>
          <tag line="302" name="access" description="public"/>
          <tag line="302" name="param" description="Contains the key of the ISinglyLinkedNode to get." type="mixed" variable="$key">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="302" name="return" description="Returns the ISinglyLinkedNode at $key if found, otherwise null." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="309">
          <name>$key</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="334" package="Data\LinkedLists">
        <name>insertBefore</name>
        <full_name>insertBefore</full_name>
        <docblock line="321">
          <description>Inserts a new ISinglyLinkedNode at before the specified key.</description>
          <long-description>&lt;p&gt;The ISinglyLinkedNode instance is created within this method. When inserting, all nodes should
be shifted and key values shifted as well for all nodes that follow this newly inserted.
Additionally, when inserting a new ISinglyLinkedNode, the key will be automatically generated as the
next numeric value in the sequence of nodes.&lt;/p&gt;</long-description>
          <tag line="321" name="access" description="public"/>
          <tag line="321" name="param" description="Contains the key value to insert a new ISinglyLinkedNode before." type="int" variable="$before">
            <type by_reference="false">int</type>
          </tag>
          <tag line="321" name="param" description="Contains the value used to create a new ISinglyLinkedNode with and inserted before $before." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="321" name="return" description="Returns the newly create ISinglyLinkedNode's key." type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="334">
          <name>$before</name>
          <default></default>
          <type/>
        </argument>
        <argument line="334">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="371" package="Data\LinkedLists">
        <name>insertAfter</name>
        <full_name>insertAfter</full_name>
        <docblock line="358">
          <description>Inserts a new ISinglyLinkedNode after the specified key.</description>
          <long-description>&lt;p&gt;The ISinglyLinkedNode instance is created within this method. When inserting, all nodes that are
to follow (come after) this node should be shifted and key values shifted as well.
Additionally, when inserting a new ISinglyLinkedNode, the key will be automatically generated
the next numeric value in the sequence of nodes.&lt;/p&gt;</long-description>
          <tag line="358" name="access" description="public"/>
          <tag line="358" name="param" description="Contains the key value to insert a new ISinglyLinkedNode after." type="int" variable="$after">
            <type by_reference="false">int</type>
          </tag>
          <tag line="358" name="param" description="Contains the value used to create a new ISinglyLinkedNode with and inserted before $after." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="358" name="return" description="Returns the newly create ISinglyLinkedNode's key." type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="371">
          <name>$after</name>
          <default></default>
          <type/>
        </argument>
        <argument line="371">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="397" package="Data\LinkedLists">
        <name>isEmpty</name>
        <full_name>isEmpty</full_name>
        <docblock line="391">
          <description>Returns a boolean to represent whether or not this list is empty.</description>
          <long-description></long-description>
          <tag line="391" name="access" description="public"/>
          <tag line="391" name="return" description="Returns true if the list is empty, otherwise returns false." type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="408" package="Data\LinkedLists">
        <name>peek</name>
        <full_name>peek</full_name>
        <docblock line="402">
          <description>Returns, but does not remove, the first node in the list.</description>
          <long-description></long-description>
          <tag line="402" name="access" description="public"/>
          <tag line="402" name="return" description="Returns the first node in the list. Will returns NULL if the list empty." type="\Data\LinkedLists\ISinglyLinkedNode|null">
            <type by_reference="false">\Data\LinkedLists\ISinglyLinkedNode</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="419" package="Data\LinkedLists">
        <name>peekFirst</name>
        <full_name>peekFirst</full_name>
        <docblock line="413">
          <description>Returns, but does not remove, the first node in the list.</description>
          <long-description></long-description>
          <tag line="413" name="access" description="public"/>
          <tag line="413" name="return" description="Returns the first node in the list. Will returns NULL if the list empty." type="\Data\LinkedLists\ISinglyLinkedNode|null">
            <type by_reference="false">\Data\LinkedLists\ISinglyLinkedNode</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="431" package="Data\LinkedLists">
        <name>peekLast</name>
        <full_name>peekLast</full_name>
        <docblock line="425">
          <description>Returns, but does not remove, the last node in the list.</description>
          <long-description></long-description>
          <tag line="425" name="access" description="public"/>
          <tag line="425" name="return" description="Returns the last node in the list. Will returns NULL if the list empty." type="\Data\LinkedLists\ISinglyLinkedNode|null">
            <type by_reference="false">\Data\LinkedLists\ISinglyLinkedNode</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="443" package="Data\LinkedLists">
        <name>poll</name>
        <full_name>poll</full_name>
        <docblock line="437">
          <description>Returns and removes the first node in the list.</description>
          <long-description></long-description>
          <tag line="437" name="access" description="public"/>
          <tag line="437" name="return" description="Returns the first node in the list. Will return NULL if the list is empty." type="\Data\LinkedLists\ISinglyLinkedNode|null">
            <type by_reference="false">\Data\LinkedLists\ISinglyLinkedNode</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="454" package="Data\LinkedLists">
        <name>pollFirst</name>
        <full_name>pollFirst</full_name>
        <docblock line="448">
          <description>Returns and removes the first node in the list.</description>
          <long-description></long-description>
          <tag line="448" name="access" description="public"/>
          <tag line="448" name="return" description="Returns the first node in the list. Will return NULL if the list is empty." type="\Data\LinkedLists\ISinglyLinkedNode|null">
            <type by_reference="false">\Data\LinkedLists\ISinglyLinkedNode</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="470" package="Data\LinkedLists">
        <name>pollLast</name>
        <full_name>pollLast</full_name>
        <docblock line="464">
          <description>Returns and removes the last node in the list.</description>
          <long-description></long-description>
          <tag line="464" name="access" description="public"/>
          <tag line="464" name="return" description="Returns the last node in the list. Will return NULL if the list is empty." type="\Data\LinkedLists\ISinglyLinkedNode|null">
            <type by_reference="false">\Data\LinkedLists\ISinglyLinkedNode</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="494" package="Data\LinkedLists">
        <name>pop</name>
        <full_name>pop</full_name>
        <docblock line="488">
          <description>Returns the last node's value and removes the last node in the list.</description>
          <long-description></long-description>
          <tag line="488" name="access" description="public"/>
          <tag line="488" name="return" description="Returns the last node value in the list. Will return NULL if the list empty." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="508" package="Data\LinkedLists">
        <name>push</name>
        <full_name>push</full_name>
        <docblock line="499">
          <description>Adds a new value onto the end of the list.</description>
          <long-description>&lt;p&gt;A new ISinglyLinkedNode instance will be created and the value assigned to the specified. A numeric
key will be created based on the sequence (last numeric key + 1) and assigned to this node.&lt;/p&gt;</long-description>
          <tag line="499" name="access" description="public"/>
          <tag line="499" name="param" description="Contains the value to push onto the list." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="508">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="525" package="Data\LinkedLists">
        <name>remove</name>
        <full_name>remove</full_name>
        <docblock line="516">
          <description>Removes all nodes whose value is equal to that specified.</description>
          <long-description>&lt;p&gt;Will remove all nodes within the list in addition to shifting and adjusting their
keys, for those that are within a numeric sequence.&lt;/p&gt;</long-description>
          <tag line="516" name="access" description="public"/>
          <tag line="516" name="param" description="Contains the value to remove." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="525">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="552" package="Data\LinkedLists">
        <name>removeAt</name>
        <full_name>removeAt</full_name>
        <docblock line="543">
          <description>Removes the node that lives at the specified key.</description>
          <long-description>&lt;p&gt;Will remove the node at $key within the list in addition to shifting and adjusting the keys for
remaining nodes that follow the removed.&lt;/p&gt;</long-description>
          <tag line="543" name="access" description="public"/>
          <tag line="543" name="param" description="Contains the value to remove." type="mixed" variable="$key">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="552">
          <name>$key</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="572" package="Data\LinkedLists">
        <name>removeFirst</name>
        <full_name>removeFirst</full_name>
        <docblock line="567">
          <description>Removes the first node from the list.</description>
          <long-description></long-description>
          <tag line="567" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="589" package="Data\LinkedLists">
        <name>removeLast</name>
        <full_name>removeLast</full_name>
        <docblock line="584">
          <description>Removes the last node from the list.</description>
          <long-description></long-description>
          <tag line="584" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="615" package="Data\LinkedLists">
        <name>removeNode</name>
        <full_name>removeNode</full_name>
        <docblock line="606">
          <description>Removes the specified node from the list.</description>
          <long-description>&lt;p&gt;If the node exists, it will be removed and all nodes that follow will be shifted and their keys
will be adjusted.&lt;/p&gt;</long-description>
          <tag line="606" name="access" description="public"/>
          <tag line="606" name="param" description="The node to remove from the list." type="\Data\ILinkedNode" variable="$node">
            <type by_reference="false">\Data\ILinkedNode</type>
          </tag>
        </docblock>
        <argument line="615">
          <name>$node</name>
          <default></default>
          <type>\Data\ILinkedNode</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="642" package="Data\LinkedLists">
        <name>sort</name>
        <full_name>sort</full_name>
        <docblock line="634">
          <description>Sorts the list by the node values.</description>
          <long-description>&lt;p&gt;The keys of all moved nodes will be adjusted so that the numeric key sequence
remains (n - 1) + 1 for all nodes.&lt;/p&gt;</long-description>
          <tag line="634" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="656" package="Data\LinkedLists">
        <name>sortBy</name>
        <full_name>sortBy</full_name>
        <docblock line="647">
          <description>Sorts the list by using a callback to specify the value to compare on.</description>
          <long-description>&lt;p&gt;The callback should take one parameter of type ISinglyLinkedNode and return a single
value that will be used for comparison.&lt;/p&gt;</long-description>
          <tag line="647" name="access" description="public"/>
          <tag line="647" name="param" description="The specified callback." type="callable" variable="$predicate">
            <type by_reference="false">callable</type>
          </tag>
        </docblock>
        <argument line="656">
          <name>$predicate</name>
          <default></default>
          <type>callable</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="683" package="Data\LinkedLists">
        <name>sortAscending</name>
        <full_name>sortAscending</full_name>
        <docblock line="675">
          <description>Sort Ascending Function to sort given list with ascending property</description>
          <long-description></long-description>
          <tag line="675" name="access" description="public"/>
          <tag line="675" name="return" description="will return 0 | 1 | -1 depending on the given ascending order" type="double">
            <type by_reference="false">double</type>
          </tag>
          <tag line="675" name="param" description="left hand side" type="\Data\LinkedLists\SinglyLinkedNode" variable="$link">
            <type by_reference="false">\Data\LinkedLists\SinglyLinkedNode</type>
          </tag>
          <tag line="675" name="param" description="right hand side" type="\Data\LinkedLists\SinglyLinkedNode" variable="$next">
            <type by_reference="false">\Data\LinkedLists\SinglyLinkedNode</type>
          </tag>
        </docblock>
        <argument line="683">
          <name>$link</name>
          <default></default>
          <type>\Data\LinkedLists\SinglyLinkedNode</type>
        </argument>
        <argument line="683">
          <name>$next</name>
          <default></default>
          <type>\Data\LinkedLists\SinglyLinkedNode</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="697" package="Data\LinkedLists">
        <name>__toString</name>
        <full_name>__toString</full_name>
        <docblock line="692">
          <description>ToString function to preview the sorted linked list in String format</description>
          <long-description></long-description>
          <tag line="692" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="719" package="Data\LinkedLists">
        <name>getIterator</name>
        <full_name>getIterator</full_name>
        <docblock line="714">
          <description>getIterator function to be implemented</description>
          <long-description></long-description>
          <tag line="714" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data\LinkedLists" line="729" package="Data\LinkedLists">
        <name>reverse</name>
        <full_name>reverse</full_name>
        <docblock line="724">
          <description>Reverses this list's set of nodes.</description>
          <long-description></long-description>
          <tag line="724" name="access" description="public"/>
        </docblock>
      </method>
      <method final="true" abstract="false" static="false" visibility="protected" namespace="Data\LinkedLists" line="754" package="Data\LinkedLists">
        <name>resetKeys</name>
        <full_name>resetKeys</full_name>
        <docblock line="746">
          <description>resetKeys function</description>
          <long-description>&lt;p&gt;will reset every key within the lest starting at $start value&lt;/p&gt;</long-description>
          <tag line="746" name="param" description="node to start at" type="\Data\ILinkedNode" variable="$first">
            <type by_reference="false">\Data\ILinkedNode</type>
          </tag>
          <tag line="746" name="param" description="the key integer to start the loop" type="double" variable="$start">
            <type by_reference="false">double</type>
          </tag>
        </docblock>
        <argument line="754">
          <name>$first</name>
          <default></default>
          <type>\Data\ILinkedNode</type>
        </argument>
        <argument line="754">
          <name>$start</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="IDoublyLinkedNode.php" hash="ef438525130d2419ad2e961d24aaa824" package="Default">
    <docblock line="2">
      <description>This file is part of the Data package.</description>
      <long-description>&lt;p&gt;For full copyright and license information, please view the LICENSE
file that was distributed with this source code.&lt;/p&gt;</long-description>
    </docblock>
    <interface namespace="Data" line="21" package="Data">
      <name>IDoublyLinkedNode</name>
      <full_name>\Data\IDoublyLinkedNode</full_name>
      <extends>\Data\ILinkedNode</extends>
      <docblock line="10">
        <description>The IDoublyLinkedNode interface is implemented by doubly linked nodes.</description>
        <long-description>&lt;p&gt;IDoublyLinkedNodes have knowledge of both the next and previous nodes within
a specific sequence or list. The ILinkedNode interface only knows
of the next node in the sequence.&lt;/p&gt;</long-description>
        <tag line="10" name="author" description="Aaron McGowan &lt;a_mcgowan43905@fanshawec.ca&gt;"/>
        <tag line="10" name="package" description="Data"/>
        <tag line="10" name="version" description="1.0.0"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data" line="30" package="Data">
        <name>getPrevious</name>
        <full_name>getPrevious</full_name>
        <docblock line="23">
          <description>Returns the previously linked node.</description>
          <long-description></long-description>
          <tag line="23" name="access" description="public"/>
          <tag line="23" name="return" description="Returns the previously linked node. Will return null&#10;  if no previous node exists." type="\Data\IDoublyLinkedNode|null">
            <type by_reference="false">\Data\IDoublyLinkedNode</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data" line="38" package="Data">
        <name>setPrevious</name>
        <full_name>setPrevious</full_name>
        <docblock line="32">
          <description>Sets the previous node.</description>
          <long-description></long-description>
          <tag line="32" name="access" description="public"/>
          <tag line="32" name="param" description="The previously linked node." type="\Data\IDoublyLinkedNode" variable="$previous">
            <type by_reference="false">\Data\IDoublyLinkedNode</type>
          </tag>
        </docblock>
        <argument line="38">
          <name>$previous</name>
          <default></default>
          <type>\Data\IDoublyLinkedNode</type>
        </argument>
      </method>
    </interface>
  </file>
  <file path="Iterator.php" hash="6b33315fc251843fefa904f96394f188" package="Default">
    <docblock line="3">
      <description>Data namespace</description>
      <long-description></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="Data" line="16" package="Data">
      <extends/>
      <implements>\IIterator</implements>
      <name>Iterator</name>
      <full_name>\Data\Iterator</full_name>
      <docblock line="8">
        <description>Iterator</description>
        <long-description></long-description>
        <tag line="8" name="package" description="Data"/>
        <tag line="8" name="version" description="1.0"/>
        <tag line="8" name="author" description="Shane Ducharme"/>
        <tag line="8" name="copyright" description="2013, Shane Ducharme"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="24" namespace="Data" package="Default">
        <name>$_array</name>
        <default>array()</default>
        <docblock line="18">
          <description>the main array</description>
          <long-description></long-description>
          <tag line="18" name="access" description="private"/>
          <tag line="18" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="32" namespace="Data" package="Default">
        <name>$mode</name>
        <default></default>
        <docblock line="26">
          <description>the mode variable</description>
          <long-description></long-description>
          <tag line="26" name="access" description="private"/>
          <tag line="26" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="40" namespace="Data" package="Default">
        <name>$_position</name>
        <default></default>
        <docblock line="34">
          <description>variable to keep track of position or key of the array</description>
          <long-description></long-description>
          <tag line="34" name="access" description="private"/>
          <tag line="34" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data" line="51" package="Data">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="42">
          <description>Construct for Iterator file</description>
          <long-description></long-description>
          <tag line="42" name="access" description="public"/>
          <tag line="42" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="42" name="throws" description="" type="\Data\InvalidArgumentException">
            <type by_reference="false">\Data\InvalidArgumentException</type>
          </tag>
          <tag line="42" name="param" description="array" type="\Data\ILinkedList" variable="$_array">
            <type by_reference="false">\Data\ILinkedList</type>
          </tag>
          <tag line="42" name="param" description="mode" type="int" variable="$mode">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="51">
          <name>$_array</name>
          <default></default>
          <type>\Data\ILinkedList</type>
        </argument>
        <argument line="51">
          <name>$mode</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data" line="74" package="Data">
        <name>current</name>
        <full_name>current</full_name>
        <docblock line="68">
          <description>current function inherited from Iterator</description>
          <long-description></long-description>
          <tag line="68" name="access" description="public"/>
          <tag line="68" name="return" description="value" type="\Data\current">
            <type by_reference="false">\Data\current</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data" line="85" package="Data">
        <name>key</name>
        <full_name>key</full_name>
        <docblock line="79">
          <description>key function inherited from Iterator</description>
          <long-description></long-description>
          <tag line="79" name="access" description="public"/>
          <tag line="79" name="return" description="of the key" type="\Data\position">
            <type by_reference="false">\Data\position</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data" line="96" package="Data">
        <name>next</name>
        <full_name>next</full_name>
        <docblock line="90">
          <description>next function inherited from Iterator</description>
          <long-description></long-description>
          <tag line="90" name="access" description="public"/>
          <tag line="90" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data" line="115" package="Data">
        <name>rewind</name>
        <full_name>rewind</full_name>
        <docblock line="109">
          <description>rewind function inherited from Iterator</description>
          <long-description></long-description>
          <tag line="109" name="access" description="public"/>
          <tag line="109" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data" line="126" package="Data">
        <name>valid</name>
        <full_name>valid</full_name>
        <docblock line="120">
          <description>valid function inherited from Iterator</description>
          <long-description></long-description>
          <tag line="120" name="access" description="public"/>
          <tag line="120" name="return" description="or false, based on if valid or not" type="true">
            <type by_reference="false">true</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data" line="137" package="Data">
        <name>setMode</name>
        <full_name>setMode</full_name>
        <docblock line="131">
          <description>Sets the iterator mode type.</description>
          <long-description></long-description>
          <tag line="131" name="access" description="public"/>
          <tag line="131" name="param" description="Contains an IteratorMode const value." type="\Data\mode" variable="$mode">
            <type by_reference="false">\Data\mode</type>
          </tag>
        </docblock>
        <argument line="137">
          <name>$mode</name>
          <default></default>
          <type>\Data\mode</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data" line="148" package="Data">
        <name>getMode</name>
        <full_name>getMode</full_name>
        <docblock line="142">
          <description>Returns the iterator mode type.</description>
          <long-description></long-description>
          <tag line="142" name="access" description="public"/>
          <tag line="142" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="INode.php" hash="123f6468eb1d564684225a214f536bde" package="Default">
    <docblock line="2">
      <description>This file is part of the Data package.</description>
      <long-description>&lt;p&gt;For full copyright and license information, please view the LICENSE
file that was distributed with this source code.&lt;/p&gt;</long-description>
    </docblock>
    <interface namespace="Data" line="17" package="Data">
      <name>INode</name>
      <full_name>\Data\INode</full_name>
      <docblock line="10">
        <description>The base node interface that defines the basic interface methods.</description>
        <long-description></long-description>
        <tag line="10" name="author" description="Aaron McGowan &lt;a_mcgowan43905@fanshawec.ca&gt;"/>
        <tag line="10" name="package" description="Data"/>
        <tag line="10" name="version" description="1.0.0"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data" line="25" package="Data">
        <name>getKey</name>
        <full_name>getKey</full_name>
        <docblock line="19">
          <description>Returns the key value for this node.</description>
          <long-description></long-description>
          <tag line="19" name="access" description="public"/>
          <tag line="19" name="return" description="Returns the key value." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data" line="33" package="Data">
        <name>setKey</name>
        <full_name>setKey</full_name>
        <docblock line="27">
          <description>Sets the key value for this node.</description>
          <long-description></long-description>
          <tag line="27" name="access" description="public"/>
          <tag line="27" name="param" description="The key value." type="mixed" variable="$key">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="33">
          <name>$key</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data" line="41" package="Data">
        <name>getValue</name>
        <full_name>getValue</full_name>
        <docblock line="35">
          <description>Returns the value of this node (the real value assigned).</description>
          <long-description></long-description>
          <tag line="35" name="access" description="public"/>
          <tag line="35" name="return" description="The value." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data" line="49" package="Data">
        <name>setValue</name>
        <full_name>setValue</full_name>
        <docblock line="43">
          <description>Sets the value for this node.</description>
          <long-description></long-description>
          <tag line="43" name="access" description="public"/>
          <tag line="43" name="param" description="The value." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="49">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="ILinkedNode.php" hash="c9661a6875fcd9d4f49deaae988759fc" package="Default">
    <docblock line="2">
      <description>This file is part of the Data package.</description>
      <long-description>&lt;p&gt;For full copyright and license information, please view the LICENSE
file that was distributed with this source code.&lt;/p&gt;</long-description>
    </docblock>
    <interface namespace="Data" line="17" package="McGowanCorp\Data">
      <name>ILinkedNode</name>
      <full_name>\Data\ILinkedNode</full_name>
      <extends>\Data\INode</extends>
      <docblock line="10">
        <description>The ILinkedNode interface is implemented by all nodes that are to be linked.</description>
        <long-description></long-description>
        <tag line="10" name="author" description="Aaron McGowan &lt;a_mcgowan43905@fanshawec.ca&gt;"/>
        <tag line="10" name="package" description="McGowanCorp\Data"/>
        <tag line="10" name="version" description="1.0.0"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data" line="25" package="McGowanCorp\Data">
        <name>getNext</name>
        <full_name>getNext</full_name>
        <docblock line="19">
          <description>Returns the next ILinkedNode.</description>
          <long-description></long-description>
          <tag line="19" name="access" description="public"/>
          <tag line="19" name="return" description="Returns the next ILinkedNode instance if it exists, otherwise returns NULL." type="\Data\ILinkedNode|null">
            <type by_reference="false">\Data\ILinkedNode</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data" line="36" package="McGowanCorp\Data">
        <name>setNext</name>
        <full_name>setNext</full_name>
        <docblock line="27">
          <description>Sets the next ILinkedNode instance.</description>
          <long-description>&lt;p&gt;The &lt;code&gt;next&lt;/code&gt; ILinkedNode should be the ILinkedNode instance that comes after
this instance within a List.&lt;/p&gt;</long-description>
          <tag line="27" name="access" description="public"/>
          <tag line="27" name="param" description="The ILinkedNode instance that is next." type="\Data\ILinkedNode" variable="$next">
            <type by_reference="false">\Data\ILinkedNode</type>
          </tag>
        </docblock>
        <argument line="36">
          <name>$next</name>
          <default></default>
          <type>\Data\ILinkedNode</type>
        </argument>
      </method>
    </interface>
  </file>
  <file path="IIterator.php" hash="7c7a60655221bff64c70dd2941c41278" package="Default">
    <docblock line="2">
      <description>This file is part of the Data package.</description>
      <long-description>&lt;p&gt;For full copyright and license information, please view the LICENSE
file that was distributed with this source code.&lt;/p&gt;</long-description>
    </docblock>
    <interface namespace="Data" line="28" package="Data">
      <name>IIterator</name>
      <full_name>\Data\IIterator</full_name>
      <extends>\Iterator</extends>
      <docblock line="10">
        <description>The IIterator interface is the base external iterator interface.</description>
        <long-description>&lt;p&gt;All external iterators within the Data package implement the IIterator
interface to ensure that the container can be traversed in a variety of ways. These
are known as "modes" and the IteratorMode class specifies these.&lt;/p&gt;

&lt;p&gt;The IteratorMode::FIFO and IteratorMode::LIFO constants are used to define
the direction of the iteration to occur, whether this is forward or reverse.
Additionally, the IteratorMode also defines KEEP and DELETE options that allow for
the iterator to remove items or keep items as the container is traversed over.&lt;/p&gt;

&lt;p&gt;Multiple options can be specified at once using BITWISE operators.&lt;/p&gt;</long-description>
        <tag line="10" name="author" description="Aaron McGowan &lt;a_mcgowan43905@fanshawec.ca&gt;"/>
        <tag line="10" name="package" description="Data"/>
        <tag line="10" name="version" description="1.0.0"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data" line="36" package="Data">
        <name>setMode</name>
        <full_name>setMode</full_name>
        <docblock line="30">
          <description>Sets the iterator mode type.</description>
          <long-description></long-description>
          <tag line="30" name="access" description="public"/>
          <tag line="30" name="param" description="Contains an IteratorMode const value." type="int" variable="$mode">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="36">
          <name>$mode</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Data" line="44" package="Data">
        <name>getMode</name>
        <full_name>getMode</full_name>
        <docblock line="38">
          <description>Returns the iterator mode type.</description>
          <long-description></long-description>
          <tag line="38" name="access" description="public"/>
          <tag line="38" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="IteratorMode.php" hash="9ec13a9134cadb738d8f2fa9ed6a329a" package="Default">
    <docblock line="2">
      <description>This file is part of the Data package.</description>
      <long-description>&lt;p&gt;For full copyright and license information, please view the LICENSE
file that was distributed with this source code.&lt;/p&gt;</long-description>
    </docblock>
    <class final="false" abstract="false" namespace="Data" line="18" package="Data">
      <extends/>
      <name>IteratorMode</name>
      <full_name>\Data\IteratorMode</full_name>
      <docblock line="10">
        <description>The IteratorMode class is used to operate as an ENUM data
type allow for the mode options to be specified.</description>
        <long-description></long-description>
        <tag line="10" name="author" description="Shane Ducharme"/>
        <tag line="10" name="package" description="Data"/>
        <tag line="10" name="version" description="1.0.0"/>
      </docblock>
      <constant namespace="Data" line="20" package="Data">
        <name>KEEP</name>
        <full_name>KEEP</full_name>
        <value>1</value>
      </constant>
      <constant namespace="Data" line="21" package="Data">
        <name>DELETE</name>
        <full_name>DELETE</full_name>
        <value>2</value>
      </constant>
      <constant namespace="Data" line="22" package="Data">
        <name>FIFO</name>
        <full_name>FIFO</full_name>
        <value>4</value>
      </constant>
      <constant namespace="Data" line="23" package="Data">
        <name>LIFO</name>
        <full_name>LIFO</full_name>
        <value>8</value>
      </constant>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Data" line="30" package="Data">
        <name>isKeep</name>
        <full_name>isKeep</full_name>
        <docblock line="24">
          <description>isKeep</description>
          <long-description></long-description>
          <tag line="24" name="param" description="mode" type="int" variable="$mode">
            <type by_reference="false">int</type>
          </tag>
          <tag line="24" name="access" description="public"/>
        </docblock>
        <argument line="30">
          <name>$mode</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Data" line="41" package="Data">
        <name>isFifo</name>
        <full_name>isFifo</full_name>
        <docblock line="35">
          <description>isFifo</description>
          <long-description></long-description>
          <tag line="35" name="param" description="mode" type="int" variable="$mode">
            <type by_reference="false">int</type>
          </tag>
          <tag line="35" name="access" description="public"/>
        </docblock>
        <argument line="41">
          <name>$mode</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Data" line="52" package="Data">
        <name>isLifo</name>
        <full_name>isLifo</full_name>
        <docblock line="46">
          <description>isLifo</description>
          <long-description></long-description>
          <tag line="46" name="param" description="mode" type="int" variable="$mode">
            <type by_reference="false">int</type>
          </tag>
          <tag line="46" name="access" description="public"/>
        </docblock>
        <argument line="52">
          <name>$mode</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Data" line="63" package="Data">
        <name>isDelete</name>
        <full_name>isDelete</full_name>
        <docblock line="57">
          <description>isDelete</description>
          <long-description></long-description>
          <tag line="57" name="param" description="mode" type="int" variable="$mode">
            <type by_reference="false">int</type>
          </tag>
          <tag line="57" name="access" description="public"/>
        </docblock>
        <argument line="63">
          <name>$mode</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <package name="Data" full_name="Data">
    <package name="LinkedList" full_name="Data\LinkedList"/>
    <package name="LinkedLists" full_name="Data\LinkedLists"/>
  </package>
  <package name="Default" full_name="Default"/>
  <package name="McGowanCorp" full_name="McGowanCorp">
    <package name="Data" full_name="McGowanCorp\Data"/>
  </package>
  <namespace name="Data" full_name="Data">
    <namespace name="LinkedLists" full_name="Data\LinkedLists"/>
  </namespace>
  <marker count="0">todo</marker>
  <marker count="0">fixme</marker>
  <deprecated count="0"/>
</project>
